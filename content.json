{"meta":{"title":"Seo's Blog","subtitle":"Programming & Study","description":null,"author":"Seo Young Ki","url":"http://dudri63.github.io"},"pages":[{"title":"Categories","date":"2019-01-15T12:11:54.000Z","updated":"2019-01-16T10:55:20.481Z","comments":true,"path":"Categories/index.html","permalink":"http://dudri63.github.io/Categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2019-01-15T11:23:13.000Z","updated":"2019-01-15T11:38:54.543Z","comments":true,"path":"Tags/index.html","permalink":"http://dudri63.github.io/Tags/index.html","excerpt":"","text":""}],"posts":[{"title":"[Algorithm] 분할 정복 알고리즘","slug":"algo4","date":"2019-01-16T12:37:50.000Z","updated":"2019-01-16T13:45:19.749Z","comments":true,"path":"2019/01/16/algo4/","link":"","permalink":"http://dudri63.github.io/2019/01/16/algo4/","excerpt":"","text":"1. 분할 정복 알고리즘이란?2. 분할 정복 알고리즘의 분류 1. 분할 정복 알고리즘이란? ‘분할 정복(Divide-and-Conquer) 알고리즘’이란 주어진 문제의 입력을 분할하여 문제를 해결(정복)하는 방식의 알고리즘이다.분할된 입력에 대하여 동일한 알고리즘을 적용 및 계산하고 결과들을 취합하여 원래 문제의 결과를 얻는다.분할된 입력에 대한 문제를 부분문제(subproblem)라고 하고, 부분문제의 해를 부분해라고 한다. 부분문제는 더이상 분할할 수 없을 때까지 계속 분할한다. 위 이미지는 분할 정복의 예이다. 그렇다면 입력 크기가 n일 때 총 몇 번 분할하여야 더 이상 분할할 수 없는 크기인 1이 될까? 답을 계산하기 위해 분할한 총 횟수를 k라고 하고, 1번 분할할 때마다 각각의 입력 크기가 절반씩 줄어든다고 가정한다. 이 때, k번 분할하였으면, 입력의 크기는 n/2k이고, 입력 크기가 n/2k=1일 때 더 이상 분할할 수 없으므로, k = log2n이다. 2. 분할 정복 알고리즘의 분류 분할 정복 알고리즘은 분할되는 부분문제의 수와 부분문제의 크기에 따라서 다음과 같이 분류할 수 있다. 입력이 2개의 부분문제로 분할, 부분문제의 크기가 1/2로 감소하는 알고리즘-&gt; 합병 정렬(Merge Sort) 입력이 2개로 분할되고, 부분문제의 크기가 일정하지 않은 크기로 감소하는 알고리즘-&gt; 퀵 정렬(Quick Sort) 입력이 2개로 분할되나, 그 중에 1개의 부분문제는 고려할 필요가 없는 알고리즘-&gt; 이진 탐색(Binary Search) 입력이 2개로 분할되나, 그 중에 1개의 부분문제는 고려할 필요가 없고, 부분문제의 크기가 일정하지 않은 크기로 감소하는 알고리즘-&gt; 선택 문제(Selection) Reference 양성봉, 『알기 쉬운 알고리즘』. 파주: (주)생능출판사, 2013 “Divide-and-conquer algorithm”, Wikipedia, 2019. 1. 16, https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://dudri63.github.io/categories/Algorithm/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://dudri63.github.io/tags/Algorithm/"},{"name":"분할 정복","slug":"분할-정복","permalink":"http://dudri63.github.io/tags/분할-정복/"}]},{"title":"[Algorithm] 알고리즘을 배우기 위한 준비(2)","slug":"algo3","date":"2019-01-16T09:41:23.000Z","updated":"2019-01-16T12:35:00.418Z","comments":true,"path":"2019/01/16/algo3/","link":"","permalink":"http://dudri63.github.io/2019/01/16/algo3/","excerpt":"","text":"4. 알고리즘의 분류5. 알고리즘의 효율성 표현6. 복잡도의 점근적 표기7. 왜 효율적인 알고리즘이 필요한가? 4. 알고리즘의 분류 알고리즘은 문제의 해결 방식에 따라 다음과 같이 분류된다. 분할 정복 알고리즘(Divide-and-Conquer) 그리디 알고리즘(Greedy) 동적 계획 알고리즘(Dynamic Programming) 근사 알고리즘(Approximation) 백트래킹 기법(Backtracking) 분기 한정 기법(Branch-and-Bound) 이 외에도 랜덤 알고리즘, 병렬 알고리즘, 분산 알고리즘, 양자 알고리즘, 유전자 알고리즘 등이 있다.문제에 따라 어떤 알고리즘이 더 효율적일지는 다를 것이다.또한, 이름 지어지지 못한 알고리즘들도 다수 존재한다.위와 같이 해결 방식에 따른 알고리즘 분류 외에도 문제에 기반을 두어 알고리즘을 분류하기도 한다.정렬 알고리즘, 그래프 알고리즘, 기하 알고리즘 등이 그 예이다. 5. 알고리즘의 효율성 표현 알고리즘의 효율성은 알고리즘의 ‘수행 시간’ 또는 알고리즘이 수행하는 동안 사용되는 ‘메모리 공간의 크기’로 나타낼 수 있다. 이들을 각각 ‘시간복잡도’, ‘공간복잡도’라고 한다. 일반적으로 알고리즘들을 비교할 때에는 시간복잡도가 주로 사용된다. 알고리즘을 프로그램으로 구현 및 실행 시켜 시간을 측정할 수 있으나, 이러한 방법은 객관적으로 평가하기가 어렵다. 왜냐하면 컴퓨터 환경, 프로그래밍 언어, 프로그래머 실력 등에 의하여 달라질 수 있기 때문이다. 그리하여 시간복잡도는 알고리즘이 수행하는 기본적인 연산 횟수를 입력 크기에 대한 함수로 표현한다.예를 들어, n장의 숫자 카드 중에서 최대 숫자를 찾는데, 순차탐색으로 찾을 경우, (n-1)번의 비교를 수행한다. 이 경우, 시간복잡도는 (n-1)이다. 알고리즘의 복잡도를 표현하는 대는 다음과 같은 분석 방법들이 있다. 최악 경우 분석(worst case analysis) 평균 경우 분석(average case analysis) 최선 경우 분석(best case analysis) 일반적으로 ‘최악 경우 분석’으로 알고리즘의 복잡도를 나타낸다. 6. 복잡도의 점근적 표기 시간복잡도, 공간복잡도는 입력 크기에 대한 함수로 표기한다.이 때, 함수는 주로 다항식인데, 이를 단순하게 나타내기 위해 ‘점근적 표기(asymptotic notation)’를 사용한다. 이는 입력 크기 n이 무한대로 커질 때의 복잡도롤 간단하게 표현하기 위함이다. 예를 들어, 3n3-15n2+10n-18을 n3으로, 4n+6을 n으로 단순화시킨다.이 단순화된 식에 상한, 하한, 동일한 증가율과 같은 개념을 적용하여, 다음과 같이 점근적 표기를 사용한다. O(Big-Oh)-표기 Ω(Big-Omega)-표기 θ(Theta)-표기 O-표기는 복잡도의 ‘점근적 상한’, Ω-표기는 복잡도의 ‘점근적 하한’, θ-표기는 복잡도의 ‘상한과 하한이 동시에 적용’되는 경우를 나타낸다. 복잡도가 f(n) = 2n2-8n+3이라면, f(n)의 O-표기는 O(n2)이다. 의미는 다음과 같다.f(n)의 단순화된 표현 n2에 임의의 상수 c를 곱한 cn2이 n이 증가함에 따라 f(n)의 상한이 된다. 단, c&gt;0 위 경우, f(n)의 Ω-표기는 Ω(n2)이다. 단, 의미는 ‘n이 증가함에 따라 2n2-8n+3이 cn2보다 작을 수 없다.’이다. θ-표기는 복잡도의 O-표기와 θ-표기가 같은 경우에 사용한다. 의미는 ‘f(n)은 n이 증가함에 따라 n2과 동일한 증가율을 가진다.’라는 뜻이다. 7. 왜 효율적인 알고리즘이 필요한가? 입력이 커질수록 알고리즘에 따른 수행 시간의 차이가 매우 커지게 된다. 효율적인 알고리즘은 값비싼 하드웨어의 기술 개발보다 훨씬 더 경제적이다. Reference 양성봉, 『알기 쉬운 알고리즘』. 파주: (주)생능출판사, 2013","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://dudri63.github.io/categories/Algorithm/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://dudri63.github.io/tags/Algorithm/"}]},{"title":"[Algorithm] 알고리즘을 배우기 위한 준비(1)","slug":"algo2","date":"2019-01-15T17:08:43.000Z","updated":"2019-01-16T10:46:16.409Z","comments":true,"path":"2019/01/16/algo2/","link":"","permalink":"http://dudri63.github.io/2019/01/16/algo2/","excerpt":"","text":"1. 알고리즘이란?2. 최초의 알고리즘3. 알고리즘의 표현 방법 1. 알고리즘이란? 알고리즘은 문제를 해결하는 단계적 절차 또는 방법이다.컴퓨터 분야에서는 컴퓨터를 이용하여 해결할 수 있는 문제여야 한다. 다음은 알고리즘의 일반적인 특성이다.정확성 : 모든 입력에 대하여 원칙적으로 올바른 답을 출력해야 한다.수행성 : 각 단계는 컴퓨터에서 수행이 가능하여야 한다. 애매모호한 표현이 있게 될 경우, 컴퓨터에서 수행할 수 없다.유한성 : 알고리즘은 일정한 시간 내에 종료되어야 한다.효율성 : 알고리즘은 항상 시간적, 공간적인 효율을 갖도록 고안되어야 한다. 2. 최초의 알고리즘 가장 오래된 알고리즘은 기원전 300년경에 만들어진 유클리드의 최대공약수를 찾는 알고리즘이다.유클리드는 2개의 자연수의 최대공약수는 ‘큰 수에서 작은 수를 뺀 수’와 ‘작은 수’와의 최대공약수와 같다는 성질을 이용하였다. 예를 들어, 22와 10의 최대공약수는 12(22-10), 10(작은 수)의 최대 공약수와 같다.이것을 반복하면 다음과 같다.최대 공약수(22, 10)= 최대공약수(22-10, 10) = 최대공약수(12, 10)= 최대공약수(12-10, 10) = 최대공약수(2, 10)= 최대공약수(10-2, 2) = 최대공약수(8, 2)= 최대공약수(8-2, 2) = 최대공약수(6, 2)= 최대공약수(6-2, 2) = 최대공약수(4, 2)= 최대공약수(4-2, 2) = 최대공약수(2, 2)= 최대공약수(2-2, 2) = 최대공약수(0, 2)= 최대공약수(2, 0) = 2(단, 최대공약수(a, 0) = a 라고 한다.) 위 예시를 뺄셈 대신 나눗셈을 사용할 경우 매우 빠르다.12345Euclid(a,b)입력: 정수 a,b; 단, a&gt;=b&gt;=0출력: 최대공약수(a,b)if(b=0) return areturn Euclid(b, a mod b) 이 경우, Euclid(22, 10)에 대하여 위 알고리즘이 수행되는 과정은 다음과 같다.b = 10이므로, Euclid(10, 22 mod 10) = Euclid(10 ,2)이 호출b = 2이므로, Euclid(2, 10 mod 2) = Euclid(2,0)이 호출b = 0이므로, return a, 최종적으로 2를 반환한다. 3. 알고리즘의 표현 방법 알고리즘의 형태는 단계별 절차이므로, 컴퓨터 프로그래밍 언어로만 표현할 필요는 없다.그러나 일반적으로 프로그래밍 언어와 유사한 의사 코드로 표현한다.이전 포스트에서 다룬 ‘최대 숫자 찾기’ 알고리즘은 다음과 같다. 보통 말로 표현한 알고리즘12345첫 카드의 숫자를 읽고 머릿속에 기억해 둔다.다음 카드의 숫자를 읽고, 그 숫자를 머릿속의 숫자와 비교한다.비교 후 큰 숫자를 머릿속에 기억해 둔다.다음에 읽을 카드가 남아 있으면 line 2로 간다.머릿속에 기억된 수자가 최대 숫자이다. 의사 코드로 표현한 알고리즘1234max=A[0]for i = 1 to 9 if(A[i] &gt; max) max = A[i]return max 위 경우는 카드가 10장 있다고 가정한 경우이다. 알고리즘이 매우 간단하면, 보통 말로도 표현할 수 있으나, 복잡하면 표현하기 어렵다.그리하여 많은 경우 알고리즘을 의사코드로 표현한다.‘플로우 차트’형식으로도 알고리즘을 표현하기도 하지만, 매우 제한적인 경우이다. Reference 양성봉, 『알기 쉬운 알고리즘』. 파주: (주)생능출판사, 2013","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://dudri63.github.io/categories/Algorithm/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://dudri63.github.io/tags/Algorithm/"}]},{"title":"[Algorithm] 알고리즘의 첫걸음","slug":"algo1","date":"2019-01-15T12:02:20.000Z","updated":"2019-01-16T10:58:05.432Z","comments":true,"path":"2019/01/15/algo1/","link":"","permalink":"http://dudri63.github.io/2019/01/15/algo1/","excerpt":"","text":"1. 최대 숫자 찾기2. 임의의 숫자 찾기3. 동전 거스름돈4. 한붓 그리기5. 미로 찾기6. 가짜 동전 찾기7. 독이 든 술단지 알고리즘이란 문제를 해결하기 위한 단계적인 절차이다.주어진 문제에 대하여 여러 종류의 알고리즘이 있을 수 있지만, 보다 더 효율적인 알고리즘을 고안하는 것이 중요하다. 1. 최대 숫자 찾기 임의의 숫자가 적혀진 카드 10장이 바닥에 놓여있는 상황을 가정한다.가장 큰 숫자가 적힌 카드를 찾는 방법들은 무엇인가? 한 가지 방법은 카드의 숫자를 하나씩 비교, 가장 큰 숫자를 기억해가며 진행하는 방법이다.이러한 방식을 ‘순차탐색(Sequential Search)’이라고 한다. 2. 임의의 숫자 찾기 위와 같은 상황에서 특정한 숫자가 적힌 카드를 찾는 방법들은 무엇인가? 한 가지 방법은 찾으려고 하는 특정 숫자를 머리 속에 기억하고 펼쳐진 카드를 한 장씩 읽으며 해당 숫자를 찾는다.이러한 방식 역시 ‘순차탐색’을 이용한 것이다. 그런데, 10장의 카드가 오름차순으로 미리 정렬되어 있다고 가정한다.이러한 경우에는 순차탐색보다 더 효율적인 방법이 있다. 오름차순으로 정렬된 데이터를 반으로 나누고 나누어진 반을 다시 반으로 나누는 것을 반복하면서 원하는 데이터를 찾는다.이러한 탐색 알고리즘을 ‘이진탐색(Binary Search)’이라고 한다. 3. 동전 거스름돈 물건을 사고 거스름돈을 동전으로 받는 상황을 가정한다.대부분의 사람들은 거스름 돈으로 적은 수의 동전을 받기를 원한다.거스름돈이 700원이라면 500원짜리 1개, 100원짜리 2개를 받기를 원한다.특별한 경우를 제외하고는 100원짜리 7개, 또는 10원짜리 70개를 받기를 원하지 않는다.그렇다면, 적은 수의 동전을 거스름돈으로 받기 위한 일반적인 방법은 무엇인가? 일반적으로 거스름돈에 대하여 가장 큰 액면의 동전부터 차례로 고려한다.남은 거스름돈 액수를 넘지 않는 한도에서 가장 큰 액면의 동전을 계속하여 선택하는 방법이다.즉, 710원이 거스름돈일 경우, 500원짜리부터, 100원, 10원 순서대로 선택한다.(710 - 500X1 = 210, 210 - 100X2 = 10, 10 - 10X1 = 0)이러한 알고리즘을 ‘그리디(Greedy) 알고리즘’이라고 한다. 4. 한붓그리기 종이에서 연필을 떼지 않고 그리는 것을 한붓그리기라고 한다.어느 한 점에서 출발하여 모든 선분을 한 번만 지나서 출발점으로 돌아오되, 그리는 동안 종이에서 연필이 떨어져서는 안 된다. 단, 한 점을 여러 차례 방문하여도 괜찮다.한붓그리기의 경우, 어떻게 해결 방안을 찾을 것인가? 현재 점으로부터 진행하고자 하는 점을 지나서 현재 점으로 돌아오는 ‘사이클(cycle)’을 찾는다. 5. 미로 찾기 복잡한 미로 속에 갇혀있을 때, 미로에서 탈출하는 방법은 무엇인가?일반적인 방법은 현 위치에서 한 방향을 선택하여 이동 후, 길이 막혀 있으면 다시 돌아 나와서 다른 방향으로 시도하는 것을 반복하는 것이다.그러나 이러한 방법은 매우 비효율적이다. 미로에서 나가는 방법 중 하나는 ‘오른속 법칙’을 이용하는 것이다. 벽에 오른손을 댄 뒤, 출구가 나올 때까지 오른속을 벽에서 떼지 않고 걸어간다.이러한 방법은 크레타 섬 미로의 실타래가 없어도, 미로에 특별한 표시를 하지 않아도 항상 출구를 찾게 해준다. 6. 가짜 동전 찾기 아주 많은 동전 더미 속에 1개의 가짜 동전이 섞여 있는 상황을 가정한다.가짜 동전은 눈으로 식별하 수 없으며, 오직 양팔 저울만을 이용해서 찾을 수 있다.(가짜 동전은 가볍다.)가능한 저울에 동전을 다는 횟수를 줄일 수 있는 방법들은 무엇인가? 첫 째, 임의의 동전 1개를 저울 왼편에 올리고, 나머지 동전을 하나씩 오른편에 올려서 가짜 동전을 찾는다.이 경우, 운이 좋다면 1번만에 가짜 동전을 찾을 수 있다.그러나 최악의 경우, 가짜 동전을 마지막으로 선택한다면, (n-1)번 저울을 재야 한다. 둘 째, 동전을 2개씩 짝을 지어, n/2 짝을 각각 저울에 달아서 가짜 동전을 찾는다.이 경우에도 마찬가지로, 운이 좋으면 첫 번째 짝을 저울에 올렸을 때 바로 가짜 동전을 발견할 수 있다.최악의 경우는 가짜 동전이 포함된 동전 짝을 가장 마지막으로 저울에 올렸을 때인데, 이 때 n/2번의 저울을 재야 한다. 셋 째, 동전들을 2개의 그룹으로 나눈 뒤 저울 양편에 각각 놓는다.그렇다면 2개의 그룹 중 가짜 동전이 어디 속해 있는지 알 수 있다.가짜 동전이 속해 있는 그룹을 다시 2개의 그룹으로 나누고, 위와 같은 작업을 반복한다.이러한 방법은 운이 좋고 나쁘고가 없다. 왜냐하면 가짜 동전은 어차피 마지막에 가서야 발견할 수 있기 때문이다.항상 log2n 횟수를 시행하여야 한다.그러나 동전의 갯수가 매우 많다면, 가장 효율적인 방법이다. 7. 독이 든 술단지 임금의 창고에는 매우 많은 술단지가 있는 상황을 가정한다. 그런데, 술단지 중 하나에 독이 들어가게 되었다.눈으로는 독이 들어간 술을 식별할 수 없다. 또한, 독이 든 술의 특징은 조금만 마셔도 정확히 일주일 뒤에 죽는다는 것이다.임금은 독이 든 술단지를 일주일 만에 찾아내라고 신하들에게 명령을 내렸다.어떻게하면 희생되는 신하의 수를 줄일 수 있을 것인가? 이러한 문제 해결의 핵심은 적은 수의 술단지에 대하여 우선 생각해 보는 것이다.술단지의 수를 늘려가면서 일반적인 규칙을 찾는 것이 중요하다. 술단지가 2개 있다고 가정한다.한 명의 신하가 하나의 술단지의 술을 맛보고 일주일 후 살아 있으면 먹지 않은 술단지에 독이 있는 것이고, 죽는다면 맛본 술단지에 독이 들어 있는 것이다. 술단지가 4개 있다고 가정한다.술단지를 두그룹으로 나눈다.신하 2명이 각 그룹의 술단지 2개 중 하나만을 맛본다.그렇다면, 맛보지 않은 술단지가 2개가 되어 일주일 후, 신하 2명이 모두 살아 있을 경우, 독이 든 술단지가 무엇인지 알 수 없게 된다.따라서, 신하 2명이 맛보지 않은 2개의 술단지 중 하나를 또한 동시에 맛보게 한다.이 경우 4개의 결과가 생기게 된다. 아무도 시음하지 않은 단지에 독이 있으면, 일주일 후 두 신하 모두 살아있다. 신하 A가 혼자 시음한 단지에 독이 있으면, 일주일 후 A만 죽는다. 신하 B가 혼자 시음한 단지에 독이 있으면, 일주일 후 B만 죽는다. A,B 둘 다 시음한 단지에 독이 있으면, 일주일 후 둘 다 죽는다. 그렇다면 술 단지 숫자가 많은 경우에는 어떻게 하여야 하는가?술단지에 ‘2진수’를 부여한다. 다음은 술단지가 8개일 때, 2진수 부여 및 술단지를 맛보는 신하들을 설정한 그림이다. 각 술단지의 번호에서 신하 A는 첫 번째 자리, 신하 B는 두 번째 자리, 신하 C는 세 번째 자리를 담당한다.그리고 술을 맛볼 경우 1로 표시, 그렇지 않을 경우 0으로 표시한다.이렇게 하여 단, 3명의 신하만을 이용하여 일주일 만에 독이 든 술단지가 무엇인지를 알 수 있다. 즉, 술단지를 2진수로 표현한 뒤, 각 비트당 한 명의 신하를 할당하는 방법이다.일반적으로 n개의 단지가 있으면, lob2n명의 신하만이 필요하다.일주일 후에 반드시 독이 든 술단지를 찾을 수 있고, 최소 희생자는 0명, 최대는 log2n명이다. Reference 양성봉, 『알기 쉬운 알고리즘』. 파주: (주)생능출판사, 2013","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://dudri63.github.io/categories/Algorithm/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://dudri63.github.io/tags/Algorithm/"}]}]}